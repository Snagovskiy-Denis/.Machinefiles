#!/bin/bash
#
# Sets ETL script as handler on filesystem events.
#
# Dependencies: inotify, rg, systemd, notify-send
#
# Expects etl-script to:
#   - use 0 exit code for success and non zero code if error occures
#   - return number of affected rows to stdout
#   - return error string to stderr
#   - to be callable without args or options
#
# Example:
#    $ etl-entrypoint etl-daylio ~/sync/default '^daylio_export_\d{4}_\d\d_\d\d\.csv$' &
#    $ etl-entrypoint etl-cronometer ~/download '^cronometer_export\.csv$' &
#    $ etl-entrypoint etl-uhabits ~/sync/habits '^Loop Habits Backup \d{4}-\d\d-\d\d.*\.db$' &
#

if [ "$#" -lt 4 ]; then
    echo "Usage: $0 <command> <watch_path> <filename_regex> <icon_path>"
    exit 1
fi

ETL_CMD="$1"
WATCH_PATH="$2"
FILENAME_REGEX="$3"
ICON="$4"

WATCH_PATH="${WATCH_PATH%/}"  # Remove trailing slash if present

inotifywait \
    --quiet \
    --monitor \
    --event close_write \
    --format "%f" \
    "$WATCH_PATH" |
    while read -r new_file; do
        if echo "$new_file" | rg --quiet "$FILENAME_REGEX"; then
            full_path="$WATCH_PATH/$new_file"

            # Run the command with the full path and capture stdout, stderr, and exit code
            output=$(mktemp)
            errors=$(mktemp)

            "$ETL_CMD" "$full_path" >"$output" 2>"$errors"
            exit_code=$?

            stdout=$(cat "$output")
            stderr=$(cat "$errors")

            if [ $exit_code -ne 0 ]; then
                # log errors to a systemd journal and show a notification
                echo "$stderr" | systemd-cat --identifier="$ETL_CMD" --priority=err
                notify-send \
                    "❌ $ETL_CMD" \
                    "cannot import data from '$new_file' because of:\n$stderr" \
                    --expire-time 10000 \
                    --icon="$ICON"
            else
                # log operation info to system journal
                echo "$stdout" | systemd-cat --identifier="$ETL_CMD" --priority=info

                # if affected more than 0 rows, notify user
                if [ -n "$stdout" ] && [ "$stdout" != "0" ]; then
                    notify-send \
                        "✅ $ETL_CMD" \
                        "$new_file inserted $stdout new entries" \
                        --expire-time 10000 \
                        --icon="$ICON"
                fi

                # remove file after successful processing
                rm -f "$full_path"
            fi

            rm -f "$output" "$errors"
        fi
    done
